options:
  docker: true

pipelines:
  default:
    - step:
        name: Service testing and build
        image: golang:1.12
        script:
          - go get github.com/golang/dep/cmd/dep
          - dep ensure --vendor-only
          - go test ./...
    - step:                
        name: Build container for staging 
        script:
          - export IMAGE_NAME=eu.gcr.io/$GCLOUD_PROJECT/${BITBUCKET_REPO_SLUG}-stag
          - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
          - export GOOGLE_APPLICATION_CREDENTIALS=~/.gcloud-api-key.json
          - docker login -u _json_key -p "`cat ${GOOGLE_APPLICATION_CREDENTIALS}`" https://eu.gcr.io
          # BUILD IMAGE
          - docker build -t ${IMAGE_NAME}:${BITBUCKET_COMMIT} -t ${IMAGE_NAME}:latest -f ./env_dev.Dockerfile .
          
          # PUBLISH IMAGE
          - docker push $IMAGE_NAME

    - step:
        name: Deploy to Staging
        image: atlassian/pipelines-kubectl
        script:
          - export IMAGE_NAME=eu.gcr.io/${GCLOUD_PROJECT}/${BITBUCKET_REPO_SLUG}-stag:${BITBUCKET_COMMIT}
          - echo $KUBECONFIG_STAG | base64 -d > kubeconfig-stag.yml
          - kubectl --kubeconfig=kubeconfig-stag.yml --namespace=applications-stag set image deployment/${BITBUCKET_REPO_SLUG}-stag ${BITBUCKET_REPO_SLUG}-container=$IMAGE_NAME 
                  
  branches:                  # add the 'tags' section
    master:                  # specify the tag
      - step:
          name: Setup, test and build app
          image: golang:1.12
          caches:
            - node
          script:
            # Install npm modules
            - npm install
            - npm test
            - npm run build
          artifacts:
            - build/**
      - step:                
          name: Build and release
          script:
            - export IMAGE_NAME=eu.gcr.io/$GCLOUD_PROJECT/$BITBUCKET_REPO_SLUG
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export GOOGLE_APPLICATION_CREDENTIALS=~/.gcloud-api-key.json
            - docker login -u _json_key -p "`cat ${GOOGLE_APPLICATION_CREDENTIALS}`" https://eu.gcr.io
            # BUILD IMAGE
            - docker build -t ${IMAGE_NAME}:${BITBUCKET_COMMIT} -t ${IMAGE_NAME}:latest -f ./env_prod.Dockerfile .
            
            # PUBLISH IMAGE
            - docker push $IMAGE_NAME

      - step:
          name: Deploy to Production
          image: atlassian/pipelines-kubectl
          script:
            - export IMAGE_NAME=eu.gcr.io/${GCLOUD_PROJECT}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_COMMIT}
            - echo $KUBECONFIG_PROD | base64 -d > kubeconfig-prod.yml
            - kubectl --kubeconfig=kubeconfig-prod.yml --namespace=applications-prod set image deployment/${BITBUCKET_REPO_SLUG}-prod ${BITBUCKET_REPO_SLUG}-container=$IMAGE_NAME 
            